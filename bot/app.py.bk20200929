#telegram基礎機能
import telegram
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, Filters, ConversationHandler, Dispatcher, CallbackQueryHandler , CommandHandler, MessageHandler

#其餘套件
from os import path
from selenium import webdriver
import configparser
import logging
import random

import db
# import botFunction
# from botFunction import *
from place.PAPI import getNear, getPlace, getSearch

# from flask import Flask, request, render_template

#===============================================
#===============================================
#===============================================

#Load data from config.ini file
config = configparser.ConfigParser()
config.read('config.ini')

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)

# Initial bot by Telegram access token
bot = telegram.Bot(token=(config['TELEGRAM']['ACCESS_TOKEN']))

#===============================================
#===================天氣用參數===================
#===============================================
city_code_list={  #各縣市ID
    "基隆":"10017", "台北":"63", "新北":"65", "桃園":"68", "新竹":"10018", "苗栗":"10005", "台中":"66", "南投":"10008", "彰化":"10007", "雲林":"10009", "嘉義":"10020", "台南":"67", "高雄":"64", "屏東":"10013", "台東":"10014", "花蓮":"10015", "宜蘭":"10002",
}
weatherDeatil = ''
weatherAll = ''

NAMING, DIRECTION, COUNTY, TYPE_ONE, TYPE_TWO, TYPE_THREE, TRAFFIC, SEARCH_PLACE, PLACE, PLACE_TWO,HISTORY = range(11)
travelname = {} #紀錄使用者當前行程名稱
cntplace = {} #紀錄使用者安排景點數量
tmpplace = {} #暫存使用者選擇景點
placebuttontmp = {} #暫存使用者按鈕資料
tmpplacedetail = {} #紀錄地點詳細資訊
tmpregion = {} #紀錄地區
tmptypes= {} #紀錄類型次數
tmpcounty= {} #紀錄縣市

#===============================================
#===================網頁用參數===================
#===============================================
webUserID = ''     #webUserID = UserID
webtravelname = '' #webtravelname = 自行命名的行程名
webRandom = ''     #webRandom = 避免行程名重複
webUrl = ''        #webUrl = 產生的網址 (UserID+自行命名的景點+亂數)
detailUrl = ''     #detailUrl = 用來產生詳細景點資訊URL

#================ bot 主程式 ================
conv_handler = ConversationHandler(
        entry_points=[CommandHandler('letsgo', naming)],

        states={
            NAMING:[MessageHandler(Filters.text, start),]
            ,
            DIRECTION: [
                        CallbackQueryHandler(selcounty),
                        ],
            COUNTY: [ 
                # CallbackQueryHandler(botFunction.start, pattern='^' + str(estartstart) + '$'),
                CallbackQueryHandler(start, pattern='^' + str(restart) + '$'),
                        CallbackQueryHandler(button),
                        MessageHandler(Filters.regex('^(/chooseOK)$'), type_one),
                        MessageHandler(Filters.regex('^(/return)$'), start),
                        MessageHandler(Filters.regex('^(Ok)$'), type_one),
                        MessageHandler(Filters.regex('^(OK)$'), type_one)],
            TYPE_ONE: [
                        MessageHandler(Filters.text, type_two),],
            TYPE_TWO:[
                        CommandHandler('done', traffic),
                        MessageHandler(Filters.text, type_three),],
            TYPE_THREE:[
                        CommandHandler('done', traffic),
                        MessageHandler(Filters.text, traffic),],
            TRAFFIC:[
                    MessageHandler(Filters.regex('^(大眾運輸🚌)$'), traffic2),
                    MessageHandler(Filters.regex('^(客運🚌)$'), place_fork),
                    MessageHandler(Filters.regex('^(火車🚂)$'), place_fork),
                    MessageHandler(Filters.regex('^(高鐵🚅)$'), place_fork),
                    MessageHandler(Filters.regex('^(其他🚂)$'), place_fork),
            ],
            SEARCH_PLACE:[CommandHandler('restart', restart),
                CommandHandler('go', place_choose),
                CommandHandler('done', place_choose),
                MessageHandler(Filters.text, search_placedetail),
                CallbackQueryHandler(search_confirmbutton, pattern='^' + str(search_confirmbutton) + '$'),
                
            ],
            PLACE:[CommandHandler('restart', restart),
                CallbackQueryHandler(returnplace, pattern='^(上一頁)$'),
                CallbackQueryHandler(confirmbutton, pattern='^' + str(confirmbutton) + '$'),
                CallbackQueryHandler(placedetail),
                CommandHandler('next', place_choose),
                CommandHandler('done', done),
                MessageHandler(Filters.regex('^(下一個)$'), place_choose),
                MessageHandler(Filters.regex('^(完成)$'), done)],
        },
        fallbacks=[CommandHandler('restart', restart),MessageHandler(Filters.regex('^Done$'), done)]
    )

history_handler = ConversationHandler(
    entry_points = [CommandHandler('History', history)],
    states = {
        HISTORY:[CallbackQueryHandler(history_output),]
    },
    fallbacks=[]
)

# New a dispatcher for bot
dispatcher = Dispatcher(bot, None)

# Add handler for handling message, there are many kinds of message. For this handler, it particular handle text
# message.
dispatcher.add_handler(conv_handler)
dispatcher.add_handler(history_handler)
dispatcher.add_handler(CommandHandler('help', help_handler))
dispatcher.add_handler(CommandHandler('start', greet))
dispatcher.add_handler(CommandHandler('restart', restart))
dispatcher.add_handler(MessageHandler(Filters.text, warnnn))
#================================================
updater = Updater(token=(config['TELEGRAM']['ACCESS_TOKEN']))
updater.start_polling() #讓程式持續運行
updater.idle()


